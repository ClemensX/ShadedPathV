Debug Printf:
Don't forget to enalble in Configurator as VK_LAYER_KHRONOS_validation preset

record video:
disable HDR in Settings: System->Display

bing ai:
To enable `GL_EXT_nonuniform_qualifier` using MoltenVK, you can follow the steps below:

1. First, ensure that you have the latest version of MoltenVK installed on your system.
2. Next, add the following line to your code: `#extension GL_EXT_nonuniform_qualifier : enable`.
3. Finally, compile your code and run it.

Please note that `GL_EXT_nonuniform_qualifier` is an extension that is not supported by all devices. You should check if your device supports this extension before using it in your code. If your device does not support this extension, you may need to use a different approach to achieve your desired functionality.

I hope this helps! Let me know if you have any other questions.

Source: Conversation with Bing, 12/12/2023
(1) when do i need GL_EXT_nonuniform_qualifier? - Stack Overflow. https://stackoverflow.com/questions/70949572/when-do-i-need-gl-ext-nonuniform-qualifier.
(2) GitHub: Let’s build from here · GitHub. https://raw.githubusercontent.com/KhronosGroup/GLSL/master/extensions/ext/GL_EXT_nonuniform_qualifier.txt.
(3) GitHub: Let’s build from here · GitHub. https://github.com/KhronosGroup/GLSL/blob/master/extensions/ext/GL_EXT_nonuniform_qualifier.txt.
(4) nonuniformEXT(<literal here>) segfaults #1900 - GitHub. https://github.com/KhronosGroup/glslang/issues/1900.
(5) Pro Tip: Improved GLSL Syntax for Vulkan DescriptorSet Indexing. https://developer.nvidia.com/blog/improved-glsl-syntax-vulkans-descriptorset-indexing/.

handle permamnent lines (NEW):


addCurrentCommandBuffer 

reuseUpdateElement?

ug.addRenderPassAndDrawCommands(tr, &ug.commandBuffer, ug.vertexBufferLocal);

Heightmap: write 9 points
 height: 0
 height: -41.0657
 height: 0
 height: -189.178
 height: -199.499
 height: 56.9964
 height: 0
 height: -32.4961
 height: 0

max:36.7

paths removed: 
C:\dev\vulkan\vcpkg
C:\dev\vulkan\libraries\vulkan\Bin
C:\dev\vulkan\libraries\ktx\bin

new install with vcpkg auto installing (some) dependencies:
do:
https://learn.microsoft.com/en-us/vcpkg/get_started/get-started?pivots=shell-powershell
then:
build as usual, e.g.:
# cmake -S . -B ./build -DCMAKE_TOOLCHAIN_FILE=C:\tools\vcpkg\scripts\buildsystems\vcpkg.cmake
## cmake -S . -B ./build -DCMAKE_TOOLCHAIN_FILE=C:\dev\cpp\vcpkg\scripts\buildsystems\vcpkg.cmake
# cmake --build ./build

todo:

make heightmap usage in billboard shader truly dynamic
terrain:
  from world: create vertex and index buffers with texture coords
  in shader: use heightmap for y

debug terrain HMD display:
proj l / r
0.7 0 -0.18  0.7 0 0.18

rec HMD size:
 2468 2740


 timings:
 259682464733100 length: 8333333
Predicted Display Time: 473062500 length: 8333333
Predicted Display Time: 481402200 length: 8333333
Predicted Display Time: 489699600 length: 8333333
Predicted Display Time: 498032600 length: 8333333
Predicted Display Time: 506367500 length: 8333333
Predicted Display Time: 514700400 length: 8333333
Predicted Display Time: 523028000 length: 8333333
Predicted Display Time: 531363800 length: 8333333
Predicted Display Time: 539728700 length: 8333333
Predicted Display Time: 548028500 length: 8333333 8000000
Predicted Display Time: 556387900 length: 8333333 8
Predicted Display Time: 564691500 length: 8333333 9
Predicted Display Time: 573023500 length: 8333333 8
Predicted Display Time: 581357100 length: 8333333 8
Predicted Display Time: 589718100 length: 8333333 
Predicted Display Time: 25968259

xr tut:
MVP = VP * M
VP = P * V

--> MVP = P * V * M
shader:
gl_Position = MVP * vec4_in

heightmap bug:
19.0037,57.1018,18.9831
terrain:
531.0037, ,530.9831 ---> 531.259 530.759 --> 57.0852
heightmap: 
(19,19) ---> 57.0568

world: 2048 * 2048 grid
-------------------------------------------------------
|\  8189 |\       |\       |                 |\       |                   
| \      | \      | \      |                 | \      |                 
|  \     |  \     |  \     |                 |  \     |                 
|   \    |   \    |   \    |                 |   \    |                  
|    \   |    \   |    \   |                 |    \   |                   
|     \  |     \  |     \  |                 |     \  |                 
|      \ |      \ |      \ |                 |      \ |                  
| 8188  \|       \|       \|                 |       \|                 
-------------------------------------------------------
-------------------------------------------------------
|\  4095 |\       |\       |                 |\       |                   
| \      | \      | \      |                 | \      |                 
|  \     |  \     |  \     |                 |  \     |                 
|   \    |   \    |   \    |                 |   \    |                  
|    \   |    \   |    \   |                 |    \   |                   
|     \  |     \  |     \  |                 |     \  |                 
|      \ |      \ |      \ |                 |      \ |                  
| 4094  \|       \|       \|                 |       \|                 
-------------------------------------------------------
-------------------------------------------------------
|\     1 |\ 3     |\ 5     |                 |\ 4093  |                   
| \      | \      | \      |                 | \      |                 
|  \     |  \     |  \     |                 |  \     |                 
|   \    |   \    |   \    |                 |   \    |                  
|    \   |    \   |    \   |                 |    \   |                   
|     \  |     \  |     \  |                 |     \  |                 
|      \ |      \ |      \ |                 |      \ |                  
| 0     \| 2     \| 4     \|                 | 4092  \|                 
-------------------------------------------------------

105.165
105.135
105.156
--> ShadedPath: 105.165
--> WC:         105.11

gun tilt:
xyz -0.35 1.5 -0.425

11labs Voices

Jessica
Nicole


        auto gpui = engine.createImage("Test Image");
        DirectImage di(&engine);
        GPUImage directImage;
        engine.globalRendering.createDumpImage(directImage);
        di.openForCPUWriteAccess(gpui, &directImage);
        engine.util.writeRawImageTestData(directImage, 0);
        di.closeCPUWriteAccess(gpui, &directImage);
        di.dumpToFile(gpui);


C:\Program Files\PowerShell\7;C:\Program Files\Oculus\Support\oculus-runtime;C:\tools\vcpkg;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\Microsoft VS Code\bin;C:\Program Files\Git\cmd;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;c:\Program Files\CMake\bin;C:\tools\maven\bin;C:\tools\UltraEdit;C:\Users\cleme\AppData\Roaming\nvm;C:\Program Files\nodejs;C:\Program Files\PowerShell\7\;C:\Program Files\NVIDIA Corporation\NVIDIA app\NvDLISR;C:\Program Files (x86)\Common Files\Acronis\SnapAPI\;C:\Program Files (x86)\Common Files\Acronis\VirtualFile\;C:\Program Files (x86)\Common Files\Acronis\VirtualFile64\;C:\Program Files (x86)\Common Files\Acronis\FileProtector\;C:\Program Files (x86)\Common Files\Acronis\FileProtector64\;C:\Program Files\dotnet\;C:\Users\cleme\AppData\Local\Programs\Python\Python312\Scripts\;C:\Users\cleme\AppData\Local\Programs\Python\Python312\;f:\secretsclient\run\bin;C:\Users\cleme\AppData\Local\Microsoft\WindowsApps;C:\Users\cleme\AppData\Roaming\nvm;C:\Program Files\nodejs;e:\secretsclient\run\bin;C:\Users\cleme\.dotnet\tools

multi thread:
each draw thread need it's own command pool to record command buffers in parallel
we need a surrounding primary command buffer, the draw threads will use secondary cmd buffers

we need another queue submit thread for rendering (added to the one for presenting) to execute
and wait for submission
OR we use global submit queue for everything. makes final copy of image easier...
  main submit queue only doing presentation seems over-the-top
--> use main submit queue for everything, also will nicely synchronize all submits...
    (data upload and long running background task are another story...)

redo shader in willems code example:
clemens@ShadedPathV MINGW64 /c/dev/cpp/Vulkan-glTF-PBR/data/shaders (master)
$ glslc -g material_pbr.frag -o material_pbr.frag.spv

 0.943287 0.097692 -0.317280     at -0.017894 0.900974 0.545404
-0.190582 -0.924082 -0.331288    at  0.026474 0.900974 0.545403
-0.190814 -0.926022 -0.325689   at  0.025699 0.900974 0.545403
 0.950813 0.133715 -0.279420     at  0.017435 0.900974 0.545404
 0.961352 0.093620 -0.258915     at -0.020320 0.900974 0.545404
-0.184916 -0.938009 -0.293163   at -0.020326 0.900974 0.545402
 0.964335 0.055209 -0.258863     at -0.017938 0.900974 0.545404
-0.185608 -0.962647 -0.197130   at -0.021625 0.900974 0.545403
 0.965867 0.061166 -0.251712     at -0.021622 0.900974 0.545404
 0.966822 0.019318 -0.254719    at -0.017982 0.900974 0.545404

{ glm::vec3(-0.017894, 0.900974, 0.545404), glm::vec3( 0.943287, 0.097692, -0.317280), glm::vec4(0.0f, 1.0f, 1.0f, 1.0f) },  
{ glm::v,ec3(0.026474, 0.900974, 0.545403), glm::vec3( -0.190582, -0.924082, -0.331288 ), glm::vec4(0.0f, 1.0f, 1.0f, 1.0f) },  
{ glm::vec,3( 0.025699, 0.900974, 0.545403), glm::vec3(-0.190814, -0.926022, -0.325689 ), glm::vec4(0.0f, 1.0f, 1.0f, 1.0f) },  
{ glm::vec,3( 0.017435, 0.900974, 0.545404), glm::vec3( 0.950813, 0.133715, -0.279420  ), glm::vec4(0.0f, 1.0f, 1.0f, 1.0f) },  
{ glm::ve,c3(-0.020320, 0.900974, 0.545404), glm::vec3( 0.961352, 0.093620, -0.258915  ), glm::vec4(0.0f, 1.0f, 1.0f, 1.0f) },  
{ glm::ve,c3(-0.020326, 0.900974, 0.545402), glm::vec3(-0.184916, -0.938009, -0.293163 ), glm::vec4(0.0f, 1.0f, 1.0f, 1.0f) },  
{ glm::vec,3(-0.017938, 0.900974, 0.545404), glm::vec3( 0.964335, 0.055209, -0.258863  ), glm::vec4(0.0f, 1.0f, 1.0f, 1.0f) },  
{ glm::ve,c3(-0.021625, 0.900974, 0.545403), glm::vec3(-0.185608, -0.962647, -0.197130 ), glm::vec4(0.0f, 1.0f, 1.0f, 1.0f) },  
{ glm::vec,3(-0.021622, 0.900974, 0.545404), glm::vec3( 0.965867, 0.061166, -0.251712  ), glm::vec4(0.0f, 1.0f, 1.0f, 1.0f) },  
{ glm::ve,c3(-0.017982, 0.900974, 0.545404), glm::vec3( 0.966822, 0.019318, -0.254719  ), glm::vec4(0.0f, 1.0f, 1.0f, 1.0f) }

debug: cccc  pixelBackBufferImage_0
inWorldPos _305.xyz float3 -0.32131, 0.07398, 0.55655
inWorldPos _305.xyz float3 -0.32018, 0.07524, 0.55749

n _890.xyz float3 -0.63848, -0.12893, 0.75876
n _890.xyz float3 -0.51156, -0.14393, 0.84711

inUV0 _288.xy float2 0.63036, 1.15925

reflection _927.xyz float3 -0.98315, -0.18245, -0.01165
reflection _927.xyz float3 -0.94877, -0.13098, 0.28753


lod _435.x float 0.00
lod _435.x float 0.00


myuv _122.xyz float3 -0.98315, -0.18245, -0.01165
myuv _122.xyz float3 -0.94877, -0.13098, 0.28753

specularLight _468.xyz float3 0.59577, 0.6154, 0.64903

eid36 prim 5950
vtx 17850 6110

		x	0.739942	float
		y	-0.642788	float
		z	0.198267	float

terrain:
desert preset 1024m ^2, res .25m (4096^2 pixel)
old valley: 2048m ^2, res .5 m (4096^2 pixel)

I need to write a program that can import maps created by WorldCreator and export as glTF 2.0.
I want to write glTF metal-roughness workflow. WorldCreator can export these Map Types:
Height Map, Color Map, Normal Map, Roughness Map, Metalness Map and Ambient Occlusion Map.


-		[0]	{name="" width=512 height=512 ...}	tinygltf::Image
+		name	""	std::string
		width	512	int
		height	512	int
		component	4	int
		bits	8	int
		pixel_type	5121	int
+		image	{ size=1048576 }	std::vector<unsigned char,std::allocator<unsigned char>>
		bufferView	-1	int
+		mimeType	""	std::string
+		uri	"Cube_BaseColor.png"	std::string
+		extras	{type_=0 int_value_=0 real_value_=0.0000000000000000 ...}	tinygltf::Value
+		extensions	{ size=0 }	std::map<std::string,tinygltf::Value,std::less<std::string>,std::allocator<std::pair<std::string const ,tinygltf::Value>>>
+		extras_json_string	""	std::string
+		extensions_json_string	""	std::string
		as_is	false	bool
