Vulkan objects

current:

engine:

    size_t currentFrame = 0;
    GLFWwindow* window = nullptr;
    VkDevice device = nullptr;
    VkRenderPass renderPass = nullptr;
    vector<VkFramebuffer> framebuffers;
    VkCommandPool commandPool;
    vector<VkCommandBuffer> commandBuffers;
    VkSwapchainKHR swapChain{};
    VkQueue graphicsQueue = nullptr;
    VkQueue presentQueue = nullptr;
    VkInstance vkInstance = nullptr;
    VkSurfaceKHR surface = nullptr;
    QueueFamilyIndices familyIndices;
    vector<VkImage> swapChainImages;
    VkFormat swapChainImageFormat{};
    VkExtent2D swapChainExtent{};
    vector<VkImageView> swapChainImageViews;
    VkPhysicalDevice physicalDevice = VK_NULL_HANDLE;

GlobalRendering:

	VkShaderModule createShaderModule(const vector<byte>& code);
	VkShaderModule vertShaderModuleTriangle = nullptr;
	VkShaderModule fragShaderModuleTriangle = nullptr;
	VkPipelineLayout pipelineLayoutTriangle = nullptr;

ThreadResources:

	VkSemaphore imageAvailableSemaphore = nullptr;
	VkSemaphore renderFinishedSemaphore = nullptr;
	VkFence inFlightFence = nullptr;


################ copy
engine:

    vector<VkFramebuffer> framebuffers;
    vector<VkCommandBuffer> commandBuffers;
    VkSwapchainKHR swapChain{};
    QueueFamilyIndices familyIndices;
    vector<VkImage> swapChainImages;
    VkFormat swapChainImageFormat{};
    VkExtent2D swapChainExtent{};
    vector<VkImageView> swapChainImageViews;

GlobalRendering:


ThreadResources:


################

planned:
split up: Engine, Presentation, GlobalRendering, Shaders, ThreadResources

Engine
  aggregate Presentation, GlobalRendering, Shaders, ThreadResources
    size_t currentFrame = 0;
  
GlobalRendering
    VkPhysicalDevice physicalDevice = VK_NULL_HANDLE;
    VkDevice device = nullptr;
    VkInstance vkInstance = nullptr;
    VkQueue graphicsQueue = nullptr;
    VkQueue presentQueue = nullptr;

Shaders

	VkShaderModule createShaderModule(const vector<byte>& code);
	VkShaderModule vertShaderModuleTriangle = nullptr;
	VkShaderModule fragShaderModuleTriangle = nullptr;

ThreadResources

	VkSemaphore imageAvailableSemaphore = nullptr;
	VkSemaphore renderFinishedSemaphore = nullptr;
	VkFence inFlightFence = nullptr;
	VkPipelineLayout pipelineLayoutTriangle = nullptr;
	VkPipeline graphicsPipelineTriangle = nullptr;
    VkRenderPass renderPass = nullptr;
    VkCommandPool commandPool;

Presentation

    VkSurfaceKHR surface = nullptr;
    GLFWwindow* window = nullptr;
